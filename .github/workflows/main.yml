# Automate the workflows after pushing code on github
# The workflow using here is: CI/CD that consists: Build -> Test -> Deploy

name: Java CI CD using docker swarm, vagrant, ansible

on:
  push: 
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs: 
  build_test:
    name: build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache the Maven packages to speed up build
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn -B package --file pom.xml

  create_jar:
    name: create jar file and download it from github runner to github server
    runs-on: ubuntu-latest
    needs: [build_test]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn -B package --file pom.xml -DskipTests

      - name: copy jar files to staging path
        run: mkdir staging && cp target/*.jar staging

      - uses: actions/upload-artifact@v1
        with:
          name: Package
          path: staging

  deploy:
    name: Publish to Docker Hub (For now)
    runs-on: ubuntu-latest
    needs: [build_test]
    steps:
      - uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}

      - name: Build Container Image
        run: |
          docker build -t app:latest .

      - name: Push Docker image
        run: |
          docker tag app:latest ${{ env.DOCKERHUB_USERNAME }}/app:latest
          docker push ${{ env.DOCKERHUB_USERNAME }}/app:latest

  
    
